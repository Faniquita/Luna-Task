
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Tarefas
 * 
 */
export type Tarefas = $Result.DefaultSelection<Prisma.$TarefasPayload>
/**
 * Model Status
 * 
 */
export type Status = $Result.DefaultSelection<Prisma.$StatusPayload>
/**
 * Model Tema
 * 
 */
export type Tema = $Result.DefaultSelection<Prisma.$TemaPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Tarefas
 * const tarefas = await prisma.tarefas.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Tarefas
   * const tarefas = await prisma.tarefas.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.tarefas`: Exposes CRUD operations for the **Tarefas** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Tarefas
    * const tarefas = await prisma.tarefas.findMany()
    * ```
    */
  get tarefas(): Prisma.TarefasDelegate<ExtArgs>;

  /**
   * `prisma.status`: Exposes CRUD operations for the **Status** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Statuses
    * const statuses = await prisma.status.findMany()
    * ```
    */
  get status(): Prisma.StatusDelegate<ExtArgs>;

  /**
   * `prisma.tema`: Exposes CRUD operations for the **Tema** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Temas
    * const temas = await prisma.tema.findMany()
    * ```
    */
  get tema(): Prisma.TemaDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.7.1
   * Query Engine version: 0ca5ccbcfa6bdc81c003cf549abe4269f59c41e5
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Tarefas: 'Tarefas',
    Status: 'Status',
    Tema: 'Tema'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'tarefas' | 'status' | 'tema'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      Tarefas: {
        payload: Prisma.$TarefasPayload<ExtArgs>
        fields: Prisma.TarefasFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TarefasFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TarefasPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TarefasFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TarefasPayload>
          }
          findFirst: {
            args: Prisma.TarefasFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TarefasPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TarefasFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TarefasPayload>
          }
          findMany: {
            args: Prisma.TarefasFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TarefasPayload>[]
          }
          create: {
            args: Prisma.TarefasCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TarefasPayload>
          }
          createMany: {
            args: Prisma.TarefasCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.TarefasDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TarefasPayload>
          }
          update: {
            args: Prisma.TarefasUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TarefasPayload>
          }
          deleteMany: {
            args: Prisma.TarefasDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.TarefasUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.TarefasUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TarefasPayload>
          }
          aggregate: {
            args: Prisma.TarefasAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateTarefas>
          }
          groupBy: {
            args: Prisma.TarefasGroupByArgs<ExtArgs>,
            result: $Utils.Optional<TarefasGroupByOutputType>[]
          }
          count: {
            args: Prisma.TarefasCountArgs<ExtArgs>,
            result: $Utils.Optional<TarefasCountAggregateOutputType> | number
          }
        }
      }
      Status: {
        payload: Prisma.$StatusPayload<ExtArgs>
        fields: Prisma.StatusFieldRefs
        operations: {
          findUnique: {
            args: Prisma.StatusFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StatusPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.StatusFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StatusPayload>
          }
          findFirst: {
            args: Prisma.StatusFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StatusPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.StatusFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StatusPayload>
          }
          findMany: {
            args: Prisma.StatusFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StatusPayload>[]
          }
          create: {
            args: Prisma.StatusCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StatusPayload>
          }
          createMany: {
            args: Prisma.StatusCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.StatusDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StatusPayload>
          }
          update: {
            args: Prisma.StatusUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StatusPayload>
          }
          deleteMany: {
            args: Prisma.StatusDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.StatusUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.StatusUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StatusPayload>
          }
          aggregate: {
            args: Prisma.StatusAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateStatus>
          }
          groupBy: {
            args: Prisma.StatusGroupByArgs<ExtArgs>,
            result: $Utils.Optional<StatusGroupByOutputType>[]
          }
          count: {
            args: Prisma.StatusCountArgs<ExtArgs>,
            result: $Utils.Optional<StatusCountAggregateOutputType> | number
          }
        }
      }
      Tema: {
        payload: Prisma.$TemaPayload<ExtArgs>
        fields: Prisma.TemaFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TemaFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TemaPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TemaFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TemaPayload>
          }
          findFirst: {
            args: Prisma.TemaFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TemaPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TemaFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TemaPayload>
          }
          findMany: {
            args: Prisma.TemaFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TemaPayload>[]
          }
          create: {
            args: Prisma.TemaCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TemaPayload>
          }
          createMany: {
            args: Prisma.TemaCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.TemaDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TemaPayload>
          }
          update: {
            args: Prisma.TemaUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TemaPayload>
          }
          deleteMany: {
            args: Prisma.TemaDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.TemaUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.TemaUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TemaPayload>
          }
          aggregate: {
            args: Prisma.TemaAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateTema>
          }
          groupBy: {
            args: Prisma.TemaGroupByArgs<ExtArgs>,
            result: $Utils.Optional<TemaGroupByOutputType>[]
          }
          count: {
            args: Prisma.TemaCountArgs<ExtArgs>,
            result: $Utils.Optional<TemaCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type StatusCountOutputType
   */

  export type StatusCountOutputType = {
    stat_tare: number
  }

  export type StatusCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    stat_tare?: boolean | StatusCountOutputTypeCountStat_tareArgs
  }

  // Custom InputTypes

  /**
   * StatusCountOutputType without action
   */
  export type StatusCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StatusCountOutputType
     */
    select?: StatusCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * StatusCountOutputType without action
   */
  export type StatusCountOutputTypeCountStat_tareArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TarefasWhereInput
  }



  /**
   * Models
   */

  /**
   * Model Tarefas
   */

  export type AggregateTarefas = {
    _count: TarefasCountAggregateOutputType | null
    _avg: TarefasAvgAggregateOutputType | null
    _sum: TarefasSumAggregateOutputType | null
    _min: TarefasMinAggregateOutputType | null
    _max: TarefasMaxAggregateOutputType | null
  }

  export type TarefasAvgAggregateOutputType = {
    tare_id: number | null
  }

  export type TarefasSumAggregateOutputType = {
    tare_id: number | null
  }

  export type TarefasMinAggregateOutputType = {
    tare_id: number | null
    tare_titulo: string | null
    tare_descricao: string | null
    tare_data: Date | null
    tare_stat_nome: string | null
  }

  export type TarefasMaxAggregateOutputType = {
    tare_id: number | null
    tare_titulo: string | null
    tare_descricao: string | null
    tare_data: Date | null
    tare_stat_nome: string | null
  }

  export type TarefasCountAggregateOutputType = {
    tare_id: number
    tare_titulo: number
    tare_descricao: number
    tare_data: number
    tare_stat_nome: number
    _all: number
  }


  export type TarefasAvgAggregateInputType = {
    tare_id?: true
  }

  export type TarefasSumAggregateInputType = {
    tare_id?: true
  }

  export type TarefasMinAggregateInputType = {
    tare_id?: true
    tare_titulo?: true
    tare_descricao?: true
    tare_data?: true
    tare_stat_nome?: true
  }

  export type TarefasMaxAggregateInputType = {
    tare_id?: true
    tare_titulo?: true
    tare_descricao?: true
    tare_data?: true
    tare_stat_nome?: true
  }

  export type TarefasCountAggregateInputType = {
    tare_id?: true
    tare_titulo?: true
    tare_descricao?: true
    tare_data?: true
    tare_stat_nome?: true
    _all?: true
  }

  export type TarefasAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Tarefas to aggregate.
     */
    where?: TarefasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tarefas to fetch.
     */
    orderBy?: TarefasOrderByWithRelationInput | TarefasOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TarefasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tarefas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tarefas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Tarefas
    **/
    _count?: true | TarefasCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TarefasAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TarefasSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TarefasMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TarefasMaxAggregateInputType
  }

  export type GetTarefasAggregateType<T extends TarefasAggregateArgs> = {
        [P in keyof T & keyof AggregateTarefas]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTarefas[P]>
      : GetScalarType<T[P], AggregateTarefas[P]>
  }




  export type TarefasGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TarefasWhereInput
    orderBy?: TarefasOrderByWithAggregationInput | TarefasOrderByWithAggregationInput[]
    by: TarefasScalarFieldEnum[] | TarefasScalarFieldEnum
    having?: TarefasScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TarefasCountAggregateInputType | true
    _avg?: TarefasAvgAggregateInputType
    _sum?: TarefasSumAggregateInputType
    _min?: TarefasMinAggregateInputType
    _max?: TarefasMaxAggregateInputType
  }

  export type TarefasGroupByOutputType = {
    tare_id: number
    tare_titulo: string
    tare_descricao: string
    tare_data: Date
    tare_stat_nome: string
    _count: TarefasCountAggregateOutputType | null
    _avg: TarefasAvgAggregateOutputType | null
    _sum: TarefasSumAggregateOutputType | null
    _min: TarefasMinAggregateOutputType | null
    _max: TarefasMaxAggregateOutputType | null
  }

  type GetTarefasGroupByPayload<T extends TarefasGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TarefasGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TarefasGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TarefasGroupByOutputType[P]>
            : GetScalarType<T[P], TarefasGroupByOutputType[P]>
        }
      >
    >


  export type TarefasSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    tare_id?: boolean
    tare_titulo?: boolean
    tare_descricao?: boolean
    tare_data?: boolean
    tare_stat_nome?: boolean
    tare_status?: boolean | StatusDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["tarefas"]>

  export type TarefasSelectScalar = {
    tare_id?: boolean
    tare_titulo?: boolean
    tare_descricao?: boolean
    tare_data?: boolean
    tare_stat_nome?: boolean
  }

  export type TarefasInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tare_status?: boolean | StatusDefaultArgs<ExtArgs>
  }


  export type $TarefasPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Tarefas"
    objects: {
      tare_status: Prisma.$StatusPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      tare_id: number
      tare_titulo: string
      tare_descricao: string
      tare_data: Date
      tare_stat_nome: string
    }, ExtArgs["result"]["tarefas"]>
    composites: {}
  }


  type TarefasGetPayload<S extends boolean | null | undefined | TarefasDefaultArgs> = $Result.GetResult<Prisma.$TarefasPayload, S>

  type TarefasCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<TarefasFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: TarefasCountAggregateInputType | true
    }

  export interface TarefasDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Tarefas'], meta: { name: 'Tarefas' } }
    /**
     * Find zero or one Tarefas that matches the filter.
     * @param {TarefasFindUniqueArgs} args - Arguments to find a Tarefas
     * @example
     * // Get one Tarefas
     * const tarefas = await prisma.tarefas.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends TarefasFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, TarefasFindUniqueArgs<ExtArgs>>
    ): Prisma__TarefasClient<$Result.GetResult<Prisma.$TarefasPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Tarefas that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {TarefasFindUniqueOrThrowArgs} args - Arguments to find a Tarefas
     * @example
     * // Get one Tarefas
     * const tarefas = await prisma.tarefas.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends TarefasFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, TarefasFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__TarefasClient<$Result.GetResult<Prisma.$TarefasPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Tarefas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TarefasFindFirstArgs} args - Arguments to find a Tarefas
     * @example
     * // Get one Tarefas
     * const tarefas = await prisma.tarefas.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends TarefasFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, TarefasFindFirstArgs<ExtArgs>>
    ): Prisma__TarefasClient<$Result.GetResult<Prisma.$TarefasPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Tarefas that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TarefasFindFirstOrThrowArgs} args - Arguments to find a Tarefas
     * @example
     * // Get one Tarefas
     * const tarefas = await prisma.tarefas.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends TarefasFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, TarefasFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__TarefasClient<$Result.GetResult<Prisma.$TarefasPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Tarefas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TarefasFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Tarefas
     * const tarefas = await prisma.tarefas.findMany()
     * 
     * // Get first 10 Tarefas
     * const tarefas = await prisma.tarefas.findMany({ take: 10 })
     * 
     * // Only select the `tare_id`
     * const tarefasWithTare_idOnly = await prisma.tarefas.findMany({ select: { tare_id: true } })
     * 
    **/
    findMany<T extends TarefasFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, TarefasFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TarefasPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Tarefas.
     * @param {TarefasCreateArgs} args - Arguments to create a Tarefas.
     * @example
     * // Create one Tarefas
     * const Tarefas = await prisma.tarefas.create({
     *   data: {
     *     // ... data to create a Tarefas
     *   }
     * })
     * 
    **/
    create<T extends TarefasCreateArgs<ExtArgs>>(
      args: SelectSubset<T, TarefasCreateArgs<ExtArgs>>
    ): Prisma__TarefasClient<$Result.GetResult<Prisma.$TarefasPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Tarefas.
     *     @param {TarefasCreateManyArgs} args - Arguments to create many Tarefas.
     *     @example
     *     // Create many Tarefas
     *     const tarefas = await prisma.tarefas.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends TarefasCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, TarefasCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Tarefas.
     * @param {TarefasDeleteArgs} args - Arguments to delete one Tarefas.
     * @example
     * // Delete one Tarefas
     * const Tarefas = await prisma.tarefas.delete({
     *   where: {
     *     // ... filter to delete one Tarefas
     *   }
     * })
     * 
    **/
    delete<T extends TarefasDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, TarefasDeleteArgs<ExtArgs>>
    ): Prisma__TarefasClient<$Result.GetResult<Prisma.$TarefasPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Tarefas.
     * @param {TarefasUpdateArgs} args - Arguments to update one Tarefas.
     * @example
     * // Update one Tarefas
     * const tarefas = await prisma.tarefas.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends TarefasUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, TarefasUpdateArgs<ExtArgs>>
    ): Prisma__TarefasClient<$Result.GetResult<Prisma.$TarefasPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Tarefas.
     * @param {TarefasDeleteManyArgs} args - Arguments to filter Tarefas to delete.
     * @example
     * // Delete a few Tarefas
     * const { count } = await prisma.tarefas.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends TarefasDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, TarefasDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tarefas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TarefasUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Tarefas
     * const tarefas = await prisma.tarefas.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends TarefasUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, TarefasUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Tarefas.
     * @param {TarefasUpsertArgs} args - Arguments to update or create a Tarefas.
     * @example
     * // Update or create a Tarefas
     * const tarefas = await prisma.tarefas.upsert({
     *   create: {
     *     // ... data to create a Tarefas
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Tarefas we want to update
     *   }
     * })
    **/
    upsert<T extends TarefasUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, TarefasUpsertArgs<ExtArgs>>
    ): Prisma__TarefasClient<$Result.GetResult<Prisma.$TarefasPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Tarefas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TarefasCountArgs} args - Arguments to filter Tarefas to count.
     * @example
     * // Count the number of Tarefas
     * const count = await prisma.tarefas.count({
     *   where: {
     *     // ... the filter for the Tarefas we want to count
     *   }
     * })
    **/
    count<T extends TarefasCountArgs>(
      args?: Subset<T, TarefasCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TarefasCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Tarefas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TarefasAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TarefasAggregateArgs>(args: Subset<T, TarefasAggregateArgs>): Prisma.PrismaPromise<GetTarefasAggregateType<T>>

    /**
     * Group by Tarefas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TarefasGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TarefasGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TarefasGroupByArgs['orderBy'] }
        : { orderBy?: TarefasGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TarefasGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTarefasGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Tarefas model
   */
  readonly fields: TarefasFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Tarefas.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TarefasClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    tare_status<T extends StatusDefaultArgs<ExtArgs> = {}>(args?: Subset<T, StatusDefaultArgs<ExtArgs>>): Prisma__StatusClient<$Result.GetResult<Prisma.$StatusPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Tarefas model
   */ 
  interface TarefasFieldRefs {
    readonly tare_id: FieldRef<"Tarefas", 'Int'>
    readonly tare_titulo: FieldRef<"Tarefas", 'String'>
    readonly tare_descricao: FieldRef<"Tarefas", 'String'>
    readonly tare_data: FieldRef<"Tarefas", 'DateTime'>
    readonly tare_stat_nome: FieldRef<"Tarefas", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Tarefas findUnique
   */
  export type TarefasFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tarefas
     */
    select?: TarefasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TarefasInclude<ExtArgs> | null
    /**
     * Filter, which Tarefas to fetch.
     */
    where: TarefasWhereUniqueInput
  }


  /**
   * Tarefas findUniqueOrThrow
   */
  export type TarefasFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tarefas
     */
    select?: TarefasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TarefasInclude<ExtArgs> | null
    /**
     * Filter, which Tarefas to fetch.
     */
    where: TarefasWhereUniqueInput
  }


  /**
   * Tarefas findFirst
   */
  export type TarefasFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tarefas
     */
    select?: TarefasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TarefasInclude<ExtArgs> | null
    /**
     * Filter, which Tarefas to fetch.
     */
    where?: TarefasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tarefas to fetch.
     */
    orderBy?: TarefasOrderByWithRelationInput | TarefasOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tarefas.
     */
    cursor?: TarefasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tarefas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tarefas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tarefas.
     */
    distinct?: TarefasScalarFieldEnum | TarefasScalarFieldEnum[]
  }


  /**
   * Tarefas findFirstOrThrow
   */
  export type TarefasFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tarefas
     */
    select?: TarefasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TarefasInclude<ExtArgs> | null
    /**
     * Filter, which Tarefas to fetch.
     */
    where?: TarefasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tarefas to fetch.
     */
    orderBy?: TarefasOrderByWithRelationInput | TarefasOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tarefas.
     */
    cursor?: TarefasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tarefas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tarefas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tarefas.
     */
    distinct?: TarefasScalarFieldEnum | TarefasScalarFieldEnum[]
  }


  /**
   * Tarefas findMany
   */
  export type TarefasFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tarefas
     */
    select?: TarefasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TarefasInclude<ExtArgs> | null
    /**
     * Filter, which Tarefas to fetch.
     */
    where?: TarefasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tarefas to fetch.
     */
    orderBy?: TarefasOrderByWithRelationInput | TarefasOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Tarefas.
     */
    cursor?: TarefasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tarefas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tarefas.
     */
    skip?: number
    distinct?: TarefasScalarFieldEnum | TarefasScalarFieldEnum[]
  }


  /**
   * Tarefas create
   */
  export type TarefasCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tarefas
     */
    select?: TarefasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TarefasInclude<ExtArgs> | null
    /**
     * The data needed to create a Tarefas.
     */
    data: XOR<TarefasCreateInput, TarefasUncheckedCreateInput>
  }


  /**
   * Tarefas createMany
   */
  export type TarefasCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Tarefas.
     */
    data: TarefasCreateManyInput | TarefasCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Tarefas update
   */
  export type TarefasUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tarefas
     */
    select?: TarefasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TarefasInclude<ExtArgs> | null
    /**
     * The data needed to update a Tarefas.
     */
    data: XOR<TarefasUpdateInput, TarefasUncheckedUpdateInput>
    /**
     * Choose, which Tarefas to update.
     */
    where: TarefasWhereUniqueInput
  }


  /**
   * Tarefas updateMany
   */
  export type TarefasUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Tarefas.
     */
    data: XOR<TarefasUpdateManyMutationInput, TarefasUncheckedUpdateManyInput>
    /**
     * Filter which Tarefas to update
     */
    where?: TarefasWhereInput
  }


  /**
   * Tarefas upsert
   */
  export type TarefasUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tarefas
     */
    select?: TarefasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TarefasInclude<ExtArgs> | null
    /**
     * The filter to search for the Tarefas to update in case it exists.
     */
    where: TarefasWhereUniqueInput
    /**
     * In case the Tarefas found by the `where` argument doesn't exist, create a new Tarefas with this data.
     */
    create: XOR<TarefasCreateInput, TarefasUncheckedCreateInput>
    /**
     * In case the Tarefas was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TarefasUpdateInput, TarefasUncheckedUpdateInput>
  }


  /**
   * Tarefas delete
   */
  export type TarefasDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tarefas
     */
    select?: TarefasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TarefasInclude<ExtArgs> | null
    /**
     * Filter which Tarefas to delete.
     */
    where: TarefasWhereUniqueInput
  }


  /**
   * Tarefas deleteMany
   */
  export type TarefasDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Tarefas to delete
     */
    where?: TarefasWhereInput
  }


  /**
   * Tarefas without action
   */
  export type TarefasDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tarefas
     */
    select?: TarefasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TarefasInclude<ExtArgs> | null
  }



  /**
   * Model Status
   */

  export type AggregateStatus = {
    _count: StatusCountAggregateOutputType | null
    _min: StatusMinAggregateOutputType | null
    _max: StatusMaxAggregateOutputType | null
  }

  export type StatusMinAggregateOutputType = {
    stat_nome: string | null
  }

  export type StatusMaxAggregateOutputType = {
    stat_nome: string | null
  }

  export type StatusCountAggregateOutputType = {
    stat_nome: number
    _all: number
  }


  export type StatusMinAggregateInputType = {
    stat_nome?: true
  }

  export type StatusMaxAggregateInputType = {
    stat_nome?: true
  }

  export type StatusCountAggregateInputType = {
    stat_nome?: true
    _all?: true
  }

  export type StatusAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Status to aggregate.
     */
    where?: StatusWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Statuses to fetch.
     */
    orderBy?: StatusOrderByWithRelationInput | StatusOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: StatusWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Statuses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Statuses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Statuses
    **/
    _count?: true | StatusCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StatusMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StatusMaxAggregateInputType
  }

  export type GetStatusAggregateType<T extends StatusAggregateArgs> = {
        [P in keyof T & keyof AggregateStatus]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStatus[P]>
      : GetScalarType<T[P], AggregateStatus[P]>
  }




  export type StatusGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StatusWhereInput
    orderBy?: StatusOrderByWithAggregationInput | StatusOrderByWithAggregationInput[]
    by: StatusScalarFieldEnum[] | StatusScalarFieldEnum
    having?: StatusScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StatusCountAggregateInputType | true
    _min?: StatusMinAggregateInputType
    _max?: StatusMaxAggregateInputType
  }

  export type StatusGroupByOutputType = {
    stat_nome: string
    _count: StatusCountAggregateOutputType | null
    _min: StatusMinAggregateOutputType | null
    _max: StatusMaxAggregateOutputType | null
  }

  type GetStatusGroupByPayload<T extends StatusGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<StatusGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StatusGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StatusGroupByOutputType[P]>
            : GetScalarType<T[P], StatusGroupByOutputType[P]>
        }
      >
    >


  export type StatusSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    stat_nome?: boolean
    stat_tare?: boolean | Status$stat_tareArgs<ExtArgs>
    _count?: boolean | StatusCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["status"]>

  export type StatusSelectScalar = {
    stat_nome?: boolean
  }

  export type StatusInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    stat_tare?: boolean | Status$stat_tareArgs<ExtArgs>
    _count?: boolean | StatusCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $StatusPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Status"
    objects: {
      stat_tare: Prisma.$TarefasPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      stat_nome: string
    }, ExtArgs["result"]["status"]>
    composites: {}
  }


  type StatusGetPayload<S extends boolean | null | undefined | StatusDefaultArgs> = $Result.GetResult<Prisma.$StatusPayload, S>

  type StatusCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<StatusFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: StatusCountAggregateInputType | true
    }

  export interface StatusDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Status'], meta: { name: 'Status' } }
    /**
     * Find zero or one Status that matches the filter.
     * @param {StatusFindUniqueArgs} args - Arguments to find a Status
     * @example
     * // Get one Status
     * const status = await prisma.status.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends StatusFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, StatusFindUniqueArgs<ExtArgs>>
    ): Prisma__StatusClient<$Result.GetResult<Prisma.$StatusPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Status that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {StatusFindUniqueOrThrowArgs} args - Arguments to find a Status
     * @example
     * // Get one Status
     * const status = await prisma.status.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends StatusFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, StatusFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__StatusClient<$Result.GetResult<Prisma.$StatusPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Status that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatusFindFirstArgs} args - Arguments to find a Status
     * @example
     * // Get one Status
     * const status = await prisma.status.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends StatusFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, StatusFindFirstArgs<ExtArgs>>
    ): Prisma__StatusClient<$Result.GetResult<Prisma.$StatusPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Status that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatusFindFirstOrThrowArgs} args - Arguments to find a Status
     * @example
     * // Get one Status
     * const status = await prisma.status.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends StatusFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, StatusFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__StatusClient<$Result.GetResult<Prisma.$StatusPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Statuses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatusFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Statuses
     * const statuses = await prisma.status.findMany()
     * 
     * // Get first 10 Statuses
     * const statuses = await prisma.status.findMany({ take: 10 })
     * 
     * // Only select the `stat_nome`
     * const statusWithStat_nomeOnly = await prisma.status.findMany({ select: { stat_nome: true } })
     * 
    **/
    findMany<T extends StatusFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, StatusFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StatusPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Status.
     * @param {StatusCreateArgs} args - Arguments to create a Status.
     * @example
     * // Create one Status
     * const Status = await prisma.status.create({
     *   data: {
     *     // ... data to create a Status
     *   }
     * })
     * 
    **/
    create<T extends StatusCreateArgs<ExtArgs>>(
      args: SelectSubset<T, StatusCreateArgs<ExtArgs>>
    ): Prisma__StatusClient<$Result.GetResult<Prisma.$StatusPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Statuses.
     *     @param {StatusCreateManyArgs} args - Arguments to create many Statuses.
     *     @example
     *     // Create many Statuses
     *     const status = await prisma.status.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends StatusCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, StatusCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Status.
     * @param {StatusDeleteArgs} args - Arguments to delete one Status.
     * @example
     * // Delete one Status
     * const Status = await prisma.status.delete({
     *   where: {
     *     // ... filter to delete one Status
     *   }
     * })
     * 
    **/
    delete<T extends StatusDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, StatusDeleteArgs<ExtArgs>>
    ): Prisma__StatusClient<$Result.GetResult<Prisma.$StatusPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Status.
     * @param {StatusUpdateArgs} args - Arguments to update one Status.
     * @example
     * // Update one Status
     * const status = await prisma.status.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends StatusUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, StatusUpdateArgs<ExtArgs>>
    ): Prisma__StatusClient<$Result.GetResult<Prisma.$StatusPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Statuses.
     * @param {StatusDeleteManyArgs} args - Arguments to filter Statuses to delete.
     * @example
     * // Delete a few Statuses
     * const { count } = await prisma.status.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends StatusDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, StatusDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Statuses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatusUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Statuses
     * const status = await prisma.status.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends StatusUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, StatusUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Status.
     * @param {StatusUpsertArgs} args - Arguments to update or create a Status.
     * @example
     * // Update or create a Status
     * const status = await prisma.status.upsert({
     *   create: {
     *     // ... data to create a Status
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Status we want to update
     *   }
     * })
    **/
    upsert<T extends StatusUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, StatusUpsertArgs<ExtArgs>>
    ): Prisma__StatusClient<$Result.GetResult<Prisma.$StatusPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Statuses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatusCountArgs} args - Arguments to filter Statuses to count.
     * @example
     * // Count the number of Statuses
     * const count = await prisma.status.count({
     *   where: {
     *     // ... the filter for the Statuses we want to count
     *   }
     * })
    **/
    count<T extends StatusCountArgs>(
      args?: Subset<T, StatusCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StatusCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Status.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatusAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StatusAggregateArgs>(args: Subset<T, StatusAggregateArgs>): Prisma.PrismaPromise<GetStatusAggregateType<T>>

    /**
     * Group by Status.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatusGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StatusGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StatusGroupByArgs['orderBy'] }
        : { orderBy?: StatusGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StatusGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStatusGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Status model
   */
  readonly fields: StatusFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Status.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__StatusClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    stat_tare<T extends Status$stat_tareArgs<ExtArgs> = {}>(args?: Subset<T, Status$stat_tareArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TarefasPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Status model
   */ 
  interface StatusFieldRefs {
    readonly stat_nome: FieldRef<"Status", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Status findUnique
   */
  export type StatusFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Status
     */
    select?: StatusSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StatusInclude<ExtArgs> | null
    /**
     * Filter, which Status to fetch.
     */
    where: StatusWhereUniqueInput
  }


  /**
   * Status findUniqueOrThrow
   */
  export type StatusFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Status
     */
    select?: StatusSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StatusInclude<ExtArgs> | null
    /**
     * Filter, which Status to fetch.
     */
    where: StatusWhereUniqueInput
  }


  /**
   * Status findFirst
   */
  export type StatusFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Status
     */
    select?: StatusSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StatusInclude<ExtArgs> | null
    /**
     * Filter, which Status to fetch.
     */
    where?: StatusWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Statuses to fetch.
     */
    orderBy?: StatusOrderByWithRelationInput | StatusOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Statuses.
     */
    cursor?: StatusWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Statuses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Statuses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Statuses.
     */
    distinct?: StatusScalarFieldEnum | StatusScalarFieldEnum[]
  }


  /**
   * Status findFirstOrThrow
   */
  export type StatusFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Status
     */
    select?: StatusSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StatusInclude<ExtArgs> | null
    /**
     * Filter, which Status to fetch.
     */
    where?: StatusWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Statuses to fetch.
     */
    orderBy?: StatusOrderByWithRelationInput | StatusOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Statuses.
     */
    cursor?: StatusWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Statuses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Statuses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Statuses.
     */
    distinct?: StatusScalarFieldEnum | StatusScalarFieldEnum[]
  }


  /**
   * Status findMany
   */
  export type StatusFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Status
     */
    select?: StatusSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StatusInclude<ExtArgs> | null
    /**
     * Filter, which Statuses to fetch.
     */
    where?: StatusWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Statuses to fetch.
     */
    orderBy?: StatusOrderByWithRelationInput | StatusOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Statuses.
     */
    cursor?: StatusWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Statuses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Statuses.
     */
    skip?: number
    distinct?: StatusScalarFieldEnum | StatusScalarFieldEnum[]
  }


  /**
   * Status create
   */
  export type StatusCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Status
     */
    select?: StatusSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StatusInclude<ExtArgs> | null
    /**
     * The data needed to create a Status.
     */
    data: XOR<StatusCreateInput, StatusUncheckedCreateInput>
  }


  /**
   * Status createMany
   */
  export type StatusCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Statuses.
     */
    data: StatusCreateManyInput | StatusCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Status update
   */
  export type StatusUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Status
     */
    select?: StatusSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StatusInclude<ExtArgs> | null
    /**
     * The data needed to update a Status.
     */
    data: XOR<StatusUpdateInput, StatusUncheckedUpdateInput>
    /**
     * Choose, which Status to update.
     */
    where: StatusWhereUniqueInput
  }


  /**
   * Status updateMany
   */
  export type StatusUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Statuses.
     */
    data: XOR<StatusUpdateManyMutationInput, StatusUncheckedUpdateManyInput>
    /**
     * Filter which Statuses to update
     */
    where?: StatusWhereInput
  }


  /**
   * Status upsert
   */
  export type StatusUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Status
     */
    select?: StatusSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StatusInclude<ExtArgs> | null
    /**
     * The filter to search for the Status to update in case it exists.
     */
    where: StatusWhereUniqueInput
    /**
     * In case the Status found by the `where` argument doesn't exist, create a new Status with this data.
     */
    create: XOR<StatusCreateInput, StatusUncheckedCreateInput>
    /**
     * In case the Status was found with the provided `where` argument, update it with this data.
     */
    update: XOR<StatusUpdateInput, StatusUncheckedUpdateInput>
  }


  /**
   * Status delete
   */
  export type StatusDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Status
     */
    select?: StatusSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StatusInclude<ExtArgs> | null
    /**
     * Filter which Status to delete.
     */
    where: StatusWhereUniqueInput
  }


  /**
   * Status deleteMany
   */
  export type StatusDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Statuses to delete
     */
    where?: StatusWhereInput
  }


  /**
   * Status.stat_tare
   */
  export type Status$stat_tareArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tarefas
     */
    select?: TarefasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TarefasInclude<ExtArgs> | null
    where?: TarefasWhereInput
    orderBy?: TarefasOrderByWithRelationInput | TarefasOrderByWithRelationInput[]
    cursor?: TarefasWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TarefasScalarFieldEnum | TarefasScalarFieldEnum[]
  }


  /**
   * Status without action
   */
  export type StatusDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Status
     */
    select?: StatusSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StatusInclude<ExtArgs> | null
  }



  /**
   * Model Tema
   */

  export type AggregateTema = {
    _count: TemaCountAggregateOutputType | null
    _avg: TemaAvgAggregateOutputType | null
    _sum: TemaSumAggregateOutputType | null
    _min: TemaMinAggregateOutputType | null
    _max: TemaMaxAggregateOutputType | null
  }

  export type TemaAvgAggregateOutputType = {
    tema_id: number | null
  }

  export type TemaSumAggregateOutputType = {
    tema_id: number | null
  }

  export type TemaMinAggregateOutputType = {
    tema_id: number | null
  }

  export type TemaMaxAggregateOutputType = {
    tema_id: number | null
  }

  export type TemaCountAggregateOutputType = {
    tema_id: number
    _all: number
  }


  export type TemaAvgAggregateInputType = {
    tema_id?: true
  }

  export type TemaSumAggregateInputType = {
    tema_id?: true
  }

  export type TemaMinAggregateInputType = {
    tema_id?: true
  }

  export type TemaMaxAggregateInputType = {
    tema_id?: true
  }

  export type TemaCountAggregateInputType = {
    tema_id?: true
    _all?: true
  }

  export type TemaAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Tema to aggregate.
     */
    where?: TemaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Temas to fetch.
     */
    orderBy?: TemaOrderByWithRelationInput | TemaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TemaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Temas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Temas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Temas
    **/
    _count?: true | TemaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TemaAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TemaSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TemaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TemaMaxAggregateInputType
  }

  export type GetTemaAggregateType<T extends TemaAggregateArgs> = {
        [P in keyof T & keyof AggregateTema]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTema[P]>
      : GetScalarType<T[P], AggregateTema[P]>
  }




  export type TemaGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TemaWhereInput
    orderBy?: TemaOrderByWithAggregationInput | TemaOrderByWithAggregationInput[]
    by: TemaScalarFieldEnum[] | TemaScalarFieldEnum
    having?: TemaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TemaCountAggregateInputType | true
    _avg?: TemaAvgAggregateInputType
    _sum?: TemaSumAggregateInputType
    _min?: TemaMinAggregateInputType
    _max?: TemaMaxAggregateInputType
  }

  export type TemaGroupByOutputType = {
    tema_id: number
    _count: TemaCountAggregateOutputType | null
    _avg: TemaAvgAggregateOutputType | null
    _sum: TemaSumAggregateOutputType | null
    _min: TemaMinAggregateOutputType | null
    _max: TemaMaxAggregateOutputType | null
  }

  type GetTemaGroupByPayload<T extends TemaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TemaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TemaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TemaGroupByOutputType[P]>
            : GetScalarType<T[P], TemaGroupByOutputType[P]>
        }
      >
    >


  export type TemaSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    tema_id?: boolean
  }, ExtArgs["result"]["tema"]>

  export type TemaSelectScalar = {
    tema_id?: boolean
  }


  export type $TemaPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Tema"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      tema_id: number
    }, ExtArgs["result"]["tema"]>
    composites: {}
  }


  type TemaGetPayload<S extends boolean | null | undefined | TemaDefaultArgs> = $Result.GetResult<Prisma.$TemaPayload, S>

  type TemaCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<TemaFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: TemaCountAggregateInputType | true
    }

  export interface TemaDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Tema'], meta: { name: 'Tema' } }
    /**
     * Find zero or one Tema that matches the filter.
     * @param {TemaFindUniqueArgs} args - Arguments to find a Tema
     * @example
     * // Get one Tema
     * const tema = await prisma.tema.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends TemaFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, TemaFindUniqueArgs<ExtArgs>>
    ): Prisma__TemaClient<$Result.GetResult<Prisma.$TemaPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Tema that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {TemaFindUniqueOrThrowArgs} args - Arguments to find a Tema
     * @example
     * // Get one Tema
     * const tema = await prisma.tema.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends TemaFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, TemaFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__TemaClient<$Result.GetResult<Prisma.$TemaPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Tema that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TemaFindFirstArgs} args - Arguments to find a Tema
     * @example
     * // Get one Tema
     * const tema = await prisma.tema.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends TemaFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, TemaFindFirstArgs<ExtArgs>>
    ): Prisma__TemaClient<$Result.GetResult<Prisma.$TemaPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Tema that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TemaFindFirstOrThrowArgs} args - Arguments to find a Tema
     * @example
     * // Get one Tema
     * const tema = await prisma.tema.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends TemaFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, TemaFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__TemaClient<$Result.GetResult<Prisma.$TemaPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Temas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TemaFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Temas
     * const temas = await prisma.tema.findMany()
     * 
     * // Get first 10 Temas
     * const temas = await prisma.tema.findMany({ take: 10 })
     * 
     * // Only select the `tema_id`
     * const temaWithTema_idOnly = await prisma.tema.findMany({ select: { tema_id: true } })
     * 
    **/
    findMany<T extends TemaFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, TemaFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TemaPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Tema.
     * @param {TemaCreateArgs} args - Arguments to create a Tema.
     * @example
     * // Create one Tema
     * const Tema = await prisma.tema.create({
     *   data: {
     *     // ... data to create a Tema
     *   }
     * })
     * 
    **/
    create<T extends TemaCreateArgs<ExtArgs>>(
      args: SelectSubset<T, TemaCreateArgs<ExtArgs>>
    ): Prisma__TemaClient<$Result.GetResult<Prisma.$TemaPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Temas.
     *     @param {TemaCreateManyArgs} args - Arguments to create many Temas.
     *     @example
     *     // Create many Temas
     *     const tema = await prisma.tema.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends TemaCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, TemaCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Tema.
     * @param {TemaDeleteArgs} args - Arguments to delete one Tema.
     * @example
     * // Delete one Tema
     * const Tema = await prisma.tema.delete({
     *   where: {
     *     // ... filter to delete one Tema
     *   }
     * })
     * 
    **/
    delete<T extends TemaDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, TemaDeleteArgs<ExtArgs>>
    ): Prisma__TemaClient<$Result.GetResult<Prisma.$TemaPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Tema.
     * @param {TemaUpdateArgs} args - Arguments to update one Tema.
     * @example
     * // Update one Tema
     * const tema = await prisma.tema.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends TemaUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, TemaUpdateArgs<ExtArgs>>
    ): Prisma__TemaClient<$Result.GetResult<Prisma.$TemaPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Temas.
     * @param {TemaDeleteManyArgs} args - Arguments to filter Temas to delete.
     * @example
     * // Delete a few Temas
     * const { count } = await prisma.tema.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends TemaDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, TemaDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Temas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TemaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Temas
     * const tema = await prisma.tema.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends TemaUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, TemaUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Tema.
     * @param {TemaUpsertArgs} args - Arguments to update or create a Tema.
     * @example
     * // Update or create a Tema
     * const tema = await prisma.tema.upsert({
     *   create: {
     *     // ... data to create a Tema
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Tema we want to update
     *   }
     * })
    **/
    upsert<T extends TemaUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, TemaUpsertArgs<ExtArgs>>
    ): Prisma__TemaClient<$Result.GetResult<Prisma.$TemaPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Temas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TemaCountArgs} args - Arguments to filter Temas to count.
     * @example
     * // Count the number of Temas
     * const count = await prisma.tema.count({
     *   where: {
     *     // ... the filter for the Temas we want to count
     *   }
     * })
    **/
    count<T extends TemaCountArgs>(
      args?: Subset<T, TemaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TemaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Tema.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TemaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TemaAggregateArgs>(args: Subset<T, TemaAggregateArgs>): Prisma.PrismaPromise<GetTemaAggregateType<T>>

    /**
     * Group by Tema.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TemaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TemaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TemaGroupByArgs['orderBy'] }
        : { orderBy?: TemaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TemaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTemaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Tema model
   */
  readonly fields: TemaFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Tema.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TemaClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Tema model
   */ 
  interface TemaFieldRefs {
    readonly tema_id: FieldRef<"Tema", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * Tema findUnique
   */
  export type TemaFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tema
     */
    select?: TemaSelect<ExtArgs> | null
    /**
     * Filter, which Tema to fetch.
     */
    where: TemaWhereUniqueInput
  }


  /**
   * Tema findUniqueOrThrow
   */
  export type TemaFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tema
     */
    select?: TemaSelect<ExtArgs> | null
    /**
     * Filter, which Tema to fetch.
     */
    where: TemaWhereUniqueInput
  }


  /**
   * Tema findFirst
   */
  export type TemaFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tema
     */
    select?: TemaSelect<ExtArgs> | null
    /**
     * Filter, which Tema to fetch.
     */
    where?: TemaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Temas to fetch.
     */
    orderBy?: TemaOrderByWithRelationInput | TemaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Temas.
     */
    cursor?: TemaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Temas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Temas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Temas.
     */
    distinct?: TemaScalarFieldEnum | TemaScalarFieldEnum[]
  }


  /**
   * Tema findFirstOrThrow
   */
  export type TemaFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tema
     */
    select?: TemaSelect<ExtArgs> | null
    /**
     * Filter, which Tema to fetch.
     */
    where?: TemaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Temas to fetch.
     */
    orderBy?: TemaOrderByWithRelationInput | TemaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Temas.
     */
    cursor?: TemaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Temas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Temas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Temas.
     */
    distinct?: TemaScalarFieldEnum | TemaScalarFieldEnum[]
  }


  /**
   * Tema findMany
   */
  export type TemaFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tema
     */
    select?: TemaSelect<ExtArgs> | null
    /**
     * Filter, which Temas to fetch.
     */
    where?: TemaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Temas to fetch.
     */
    orderBy?: TemaOrderByWithRelationInput | TemaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Temas.
     */
    cursor?: TemaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Temas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Temas.
     */
    skip?: number
    distinct?: TemaScalarFieldEnum | TemaScalarFieldEnum[]
  }


  /**
   * Tema create
   */
  export type TemaCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tema
     */
    select?: TemaSelect<ExtArgs> | null
    /**
     * The data needed to create a Tema.
     */
    data?: XOR<TemaCreateInput, TemaUncheckedCreateInput>
  }


  /**
   * Tema createMany
   */
  export type TemaCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Temas.
     */
    data: TemaCreateManyInput | TemaCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Tema update
   */
  export type TemaUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tema
     */
    select?: TemaSelect<ExtArgs> | null
    /**
     * The data needed to update a Tema.
     */
    data: XOR<TemaUpdateInput, TemaUncheckedUpdateInput>
    /**
     * Choose, which Tema to update.
     */
    where: TemaWhereUniqueInput
  }


  /**
   * Tema updateMany
   */
  export type TemaUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Temas.
     */
    data: XOR<TemaUpdateManyMutationInput, TemaUncheckedUpdateManyInput>
    /**
     * Filter which Temas to update
     */
    where?: TemaWhereInput
  }


  /**
   * Tema upsert
   */
  export type TemaUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tema
     */
    select?: TemaSelect<ExtArgs> | null
    /**
     * The filter to search for the Tema to update in case it exists.
     */
    where: TemaWhereUniqueInput
    /**
     * In case the Tema found by the `where` argument doesn't exist, create a new Tema with this data.
     */
    create: XOR<TemaCreateInput, TemaUncheckedCreateInput>
    /**
     * In case the Tema was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TemaUpdateInput, TemaUncheckedUpdateInput>
  }


  /**
   * Tema delete
   */
  export type TemaDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tema
     */
    select?: TemaSelect<ExtArgs> | null
    /**
     * Filter which Tema to delete.
     */
    where: TemaWhereUniqueInput
  }


  /**
   * Tema deleteMany
   */
  export type TemaDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Temas to delete
     */
    where?: TemaWhereInput
  }


  /**
   * Tema without action
   */
  export type TemaDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tema
     */
    select?: TemaSelect<ExtArgs> | null
  }



  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const TarefasScalarFieldEnum: {
    tare_id: 'tare_id',
    tare_titulo: 'tare_titulo',
    tare_descricao: 'tare_descricao',
    tare_data: 'tare_data',
    tare_stat_nome: 'tare_stat_nome'
  };

  export type TarefasScalarFieldEnum = (typeof TarefasScalarFieldEnum)[keyof typeof TarefasScalarFieldEnum]


  export const StatusScalarFieldEnum: {
    stat_nome: 'stat_nome'
  };

  export type StatusScalarFieldEnum = (typeof StatusScalarFieldEnum)[keyof typeof StatusScalarFieldEnum]


  export const TemaScalarFieldEnum: {
    tema_id: 'tema_id'
  };

  export type TemaScalarFieldEnum = (typeof TemaScalarFieldEnum)[keyof typeof TemaScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type TarefasWhereInput = {
    AND?: TarefasWhereInput | TarefasWhereInput[]
    OR?: TarefasWhereInput[]
    NOT?: TarefasWhereInput | TarefasWhereInput[]
    tare_id?: IntFilter<"Tarefas"> | number
    tare_titulo?: StringFilter<"Tarefas"> | string
    tare_descricao?: StringFilter<"Tarefas"> | string
    tare_data?: DateTimeFilter<"Tarefas"> | Date | string
    tare_stat_nome?: StringFilter<"Tarefas"> | string
    tare_status?: XOR<StatusRelationFilter, StatusWhereInput>
  }

  export type TarefasOrderByWithRelationInput = {
    tare_id?: SortOrder
    tare_titulo?: SortOrder
    tare_descricao?: SortOrder
    tare_data?: SortOrder
    tare_stat_nome?: SortOrder
    tare_status?: StatusOrderByWithRelationInput
  }

  export type TarefasWhereUniqueInput = Prisma.AtLeast<{
    tare_id?: number
    AND?: TarefasWhereInput | TarefasWhereInput[]
    OR?: TarefasWhereInput[]
    NOT?: TarefasWhereInput | TarefasWhereInput[]
    tare_titulo?: StringFilter<"Tarefas"> | string
    tare_descricao?: StringFilter<"Tarefas"> | string
    tare_data?: DateTimeFilter<"Tarefas"> | Date | string
    tare_stat_nome?: StringFilter<"Tarefas"> | string
    tare_status?: XOR<StatusRelationFilter, StatusWhereInput>
  }, "tare_id">

  export type TarefasOrderByWithAggregationInput = {
    tare_id?: SortOrder
    tare_titulo?: SortOrder
    tare_descricao?: SortOrder
    tare_data?: SortOrder
    tare_stat_nome?: SortOrder
    _count?: TarefasCountOrderByAggregateInput
    _avg?: TarefasAvgOrderByAggregateInput
    _max?: TarefasMaxOrderByAggregateInput
    _min?: TarefasMinOrderByAggregateInput
    _sum?: TarefasSumOrderByAggregateInput
  }

  export type TarefasScalarWhereWithAggregatesInput = {
    AND?: TarefasScalarWhereWithAggregatesInput | TarefasScalarWhereWithAggregatesInput[]
    OR?: TarefasScalarWhereWithAggregatesInput[]
    NOT?: TarefasScalarWhereWithAggregatesInput | TarefasScalarWhereWithAggregatesInput[]
    tare_id?: IntWithAggregatesFilter<"Tarefas"> | number
    tare_titulo?: StringWithAggregatesFilter<"Tarefas"> | string
    tare_descricao?: StringWithAggregatesFilter<"Tarefas"> | string
    tare_data?: DateTimeWithAggregatesFilter<"Tarefas"> | Date | string
    tare_stat_nome?: StringWithAggregatesFilter<"Tarefas"> | string
  }

  export type StatusWhereInput = {
    AND?: StatusWhereInput | StatusWhereInput[]
    OR?: StatusWhereInput[]
    NOT?: StatusWhereInput | StatusWhereInput[]
    stat_nome?: StringFilter<"Status"> | string
    stat_tare?: TarefasListRelationFilter
  }

  export type StatusOrderByWithRelationInput = {
    stat_nome?: SortOrder
    stat_tare?: TarefasOrderByRelationAggregateInput
  }

  export type StatusWhereUniqueInput = Prisma.AtLeast<{
    stat_nome?: string
    AND?: StatusWhereInput | StatusWhereInput[]
    OR?: StatusWhereInput[]
    NOT?: StatusWhereInput | StatusWhereInput[]
    stat_tare?: TarefasListRelationFilter
  }, "stat_nome">

  export type StatusOrderByWithAggregationInput = {
    stat_nome?: SortOrder
    _count?: StatusCountOrderByAggregateInput
    _max?: StatusMaxOrderByAggregateInput
    _min?: StatusMinOrderByAggregateInput
  }

  export type StatusScalarWhereWithAggregatesInput = {
    AND?: StatusScalarWhereWithAggregatesInput | StatusScalarWhereWithAggregatesInput[]
    OR?: StatusScalarWhereWithAggregatesInput[]
    NOT?: StatusScalarWhereWithAggregatesInput | StatusScalarWhereWithAggregatesInput[]
    stat_nome?: StringWithAggregatesFilter<"Status"> | string
  }

  export type TemaWhereInput = {
    AND?: TemaWhereInput | TemaWhereInput[]
    OR?: TemaWhereInput[]
    NOT?: TemaWhereInput | TemaWhereInput[]
    tema_id?: IntFilter<"Tema"> | number
  }

  export type TemaOrderByWithRelationInput = {
    tema_id?: SortOrder
  }

  export type TemaWhereUniqueInput = Prisma.AtLeast<{
    tema_id?: number
    AND?: TemaWhereInput | TemaWhereInput[]
    OR?: TemaWhereInput[]
    NOT?: TemaWhereInput | TemaWhereInput[]
  }, "tema_id">

  export type TemaOrderByWithAggregationInput = {
    tema_id?: SortOrder
    _count?: TemaCountOrderByAggregateInput
    _avg?: TemaAvgOrderByAggregateInput
    _max?: TemaMaxOrderByAggregateInput
    _min?: TemaMinOrderByAggregateInput
    _sum?: TemaSumOrderByAggregateInput
  }

  export type TemaScalarWhereWithAggregatesInput = {
    AND?: TemaScalarWhereWithAggregatesInput | TemaScalarWhereWithAggregatesInput[]
    OR?: TemaScalarWhereWithAggregatesInput[]
    NOT?: TemaScalarWhereWithAggregatesInput | TemaScalarWhereWithAggregatesInput[]
    tema_id?: IntWithAggregatesFilter<"Tema"> | number
  }

  export type TarefasCreateInput = {
    tare_titulo: string
    tare_descricao: string
    tare_data?: Date | string
    tare_status: StatusCreateNestedOneWithoutStat_tareInput
  }

  export type TarefasUncheckedCreateInput = {
    tare_id?: number
    tare_titulo: string
    tare_descricao: string
    tare_data?: Date | string
    tare_stat_nome: string
  }

  export type TarefasUpdateInput = {
    tare_titulo?: StringFieldUpdateOperationsInput | string
    tare_descricao?: StringFieldUpdateOperationsInput | string
    tare_data?: DateTimeFieldUpdateOperationsInput | Date | string
    tare_status?: StatusUpdateOneRequiredWithoutStat_tareNestedInput
  }

  export type TarefasUncheckedUpdateInput = {
    tare_id?: IntFieldUpdateOperationsInput | number
    tare_titulo?: StringFieldUpdateOperationsInput | string
    tare_descricao?: StringFieldUpdateOperationsInput | string
    tare_data?: DateTimeFieldUpdateOperationsInput | Date | string
    tare_stat_nome?: StringFieldUpdateOperationsInput | string
  }

  export type TarefasCreateManyInput = {
    tare_id?: number
    tare_titulo: string
    tare_descricao: string
    tare_data?: Date | string
    tare_stat_nome: string
  }

  export type TarefasUpdateManyMutationInput = {
    tare_titulo?: StringFieldUpdateOperationsInput | string
    tare_descricao?: StringFieldUpdateOperationsInput | string
    tare_data?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TarefasUncheckedUpdateManyInput = {
    tare_id?: IntFieldUpdateOperationsInput | number
    tare_titulo?: StringFieldUpdateOperationsInput | string
    tare_descricao?: StringFieldUpdateOperationsInput | string
    tare_data?: DateTimeFieldUpdateOperationsInput | Date | string
    tare_stat_nome?: StringFieldUpdateOperationsInput | string
  }

  export type StatusCreateInput = {
    stat_nome: string
    stat_tare?: TarefasCreateNestedManyWithoutTare_statusInput
  }

  export type StatusUncheckedCreateInput = {
    stat_nome: string
    stat_tare?: TarefasUncheckedCreateNestedManyWithoutTare_statusInput
  }

  export type StatusUpdateInput = {
    stat_nome?: StringFieldUpdateOperationsInput | string
    stat_tare?: TarefasUpdateManyWithoutTare_statusNestedInput
  }

  export type StatusUncheckedUpdateInput = {
    stat_nome?: StringFieldUpdateOperationsInput | string
    stat_tare?: TarefasUncheckedUpdateManyWithoutTare_statusNestedInput
  }

  export type StatusCreateManyInput = {
    stat_nome: string
  }

  export type StatusUpdateManyMutationInput = {
    stat_nome?: StringFieldUpdateOperationsInput | string
  }

  export type StatusUncheckedUpdateManyInput = {
    stat_nome?: StringFieldUpdateOperationsInput | string
  }

  export type TemaCreateInput = {
    tema_id?: number
  }

  export type TemaUncheckedCreateInput = {
    tema_id?: number
  }

  export type TemaUpdateInput = {
    tema_id?: IntFieldUpdateOperationsInput | number
  }

  export type TemaUncheckedUpdateInput = {
    tema_id?: IntFieldUpdateOperationsInput | number
  }

  export type TemaCreateManyInput = {
    tema_id?: number
  }

  export type TemaUpdateManyMutationInput = {
    tema_id?: IntFieldUpdateOperationsInput | number
  }

  export type TemaUncheckedUpdateManyInput = {
    tema_id?: IntFieldUpdateOperationsInput | number
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type StatusRelationFilter = {
    is?: StatusWhereInput
    isNot?: StatusWhereInput
  }

  export type TarefasCountOrderByAggregateInput = {
    tare_id?: SortOrder
    tare_titulo?: SortOrder
    tare_descricao?: SortOrder
    tare_data?: SortOrder
    tare_stat_nome?: SortOrder
  }

  export type TarefasAvgOrderByAggregateInput = {
    tare_id?: SortOrder
  }

  export type TarefasMaxOrderByAggregateInput = {
    tare_id?: SortOrder
    tare_titulo?: SortOrder
    tare_descricao?: SortOrder
    tare_data?: SortOrder
    tare_stat_nome?: SortOrder
  }

  export type TarefasMinOrderByAggregateInput = {
    tare_id?: SortOrder
    tare_titulo?: SortOrder
    tare_descricao?: SortOrder
    tare_data?: SortOrder
    tare_stat_nome?: SortOrder
  }

  export type TarefasSumOrderByAggregateInput = {
    tare_id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type TarefasListRelationFilter = {
    every?: TarefasWhereInput
    some?: TarefasWhereInput
    none?: TarefasWhereInput
  }

  export type TarefasOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type StatusCountOrderByAggregateInput = {
    stat_nome?: SortOrder
  }

  export type StatusMaxOrderByAggregateInput = {
    stat_nome?: SortOrder
  }

  export type StatusMinOrderByAggregateInput = {
    stat_nome?: SortOrder
  }

  export type TemaCountOrderByAggregateInput = {
    tema_id?: SortOrder
  }

  export type TemaAvgOrderByAggregateInput = {
    tema_id?: SortOrder
  }

  export type TemaMaxOrderByAggregateInput = {
    tema_id?: SortOrder
  }

  export type TemaMinOrderByAggregateInput = {
    tema_id?: SortOrder
  }

  export type TemaSumOrderByAggregateInput = {
    tema_id?: SortOrder
  }

  export type StatusCreateNestedOneWithoutStat_tareInput = {
    create?: XOR<StatusCreateWithoutStat_tareInput, StatusUncheckedCreateWithoutStat_tareInput>
    connectOrCreate?: StatusCreateOrConnectWithoutStat_tareInput
    connect?: StatusWhereUniqueInput
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type StatusUpdateOneRequiredWithoutStat_tareNestedInput = {
    create?: XOR<StatusCreateWithoutStat_tareInput, StatusUncheckedCreateWithoutStat_tareInput>
    connectOrCreate?: StatusCreateOrConnectWithoutStat_tareInput
    upsert?: StatusUpsertWithoutStat_tareInput
    connect?: StatusWhereUniqueInput
    update?: XOR<XOR<StatusUpdateToOneWithWhereWithoutStat_tareInput, StatusUpdateWithoutStat_tareInput>, StatusUncheckedUpdateWithoutStat_tareInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type TarefasCreateNestedManyWithoutTare_statusInput = {
    create?: XOR<TarefasCreateWithoutTare_statusInput, TarefasUncheckedCreateWithoutTare_statusInput> | TarefasCreateWithoutTare_statusInput[] | TarefasUncheckedCreateWithoutTare_statusInput[]
    connectOrCreate?: TarefasCreateOrConnectWithoutTare_statusInput | TarefasCreateOrConnectWithoutTare_statusInput[]
    createMany?: TarefasCreateManyTare_statusInputEnvelope
    connect?: TarefasWhereUniqueInput | TarefasWhereUniqueInput[]
  }

  export type TarefasUncheckedCreateNestedManyWithoutTare_statusInput = {
    create?: XOR<TarefasCreateWithoutTare_statusInput, TarefasUncheckedCreateWithoutTare_statusInput> | TarefasCreateWithoutTare_statusInput[] | TarefasUncheckedCreateWithoutTare_statusInput[]
    connectOrCreate?: TarefasCreateOrConnectWithoutTare_statusInput | TarefasCreateOrConnectWithoutTare_statusInput[]
    createMany?: TarefasCreateManyTare_statusInputEnvelope
    connect?: TarefasWhereUniqueInput | TarefasWhereUniqueInput[]
  }

  export type TarefasUpdateManyWithoutTare_statusNestedInput = {
    create?: XOR<TarefasCreateWithoutTare_statusInput, TarefasUncheckedCreateWithoutTare_statusInput> | TarefasCreateWithoutTare_statusInput[] | TarefasUncheckedCreateWithoutTare_statusInput[]
    connectOrCreate?: TarefasCreateOrConnectWithoutTare_statusInput | TarefasCreateOrConnectWithoutTare_statusInput[]
    upsert?: TarefasUpsertWithWhereUniqueWithoutTare_statusInput | TarefasUpsertWithWhereUniqueWithoutTare_statusInput[]
    createMany?: TarefasCreateManyTare_statusInputEnvelope
    set?: TarefasWhereUniqueInput | TarefasWhereUniqueInput[]
    disconnect?: TarefasWhereUniqueInput | TarefasWhereUniqueInput[]
    delete?: TarefasWhereUniqueInput | TarefasWhereUniqueInput[]
    connect?: TarefasWhereUniqueInput | TarefasWhereUniqueInput[]
    update?: TarefasUpdateWithWhereUniqueWithoutTare_statusInput | TarefasUpdateWithWhereUniqueWithoutTare_statusInput[]
    updateMany?: TarefasUpdateManyWithWhereWithoutTare_statusInput | TarefasUpdateManyWithWhereWithoutTare_statusInput[]
    deleteMany?: TarefasScalarWhereInput | TarefasScalarWhereInput[]
  }

  export type TarefasUncheckedUpdateManyWithoutTare_statusNestedInput = {
    create?: XOR<TarefasCreateWithoutTare_statusInput, TarefasUncheckedCreateWithoutTare_statusInput> | TarefasCreateWithoutTare_statusInput[] | TarefasUncheckedCreateWithoutTare_statusInput[]
    connectOrCreate?: TarefasCreateOrConnectWithoutTare_statusInput | TarefasCreateOrConnectWithoutTare_statusInput[]
    upsert?: TarefasUpsertWithWhereUniqueWithoutTare_statusInput | TarefasUpsertWithWhereUniqueWithoutTare_statusInput[]
    createMany?: TarefasCreateManyTare_statusInputEnvelope
    set?: TarefasWhereUniqueInput | TarefasWhereUniqueInput[]
    disconnect?: TarefasWhereUniqueInput | TarefasWhereUniqueInput[]
    delete?: TarefasWhereUniqueInput | TarefasWhereUniqueInput[]
    connect?: TarefasWhereUniqueInput | TarefasWhereUniqueInput[]
    update?: TarefasUpdateWithWhereUniqueWithoutTare_statusInput | TarefasUpdateWithWhereUniqueWithoutTare_statusInput[]
    updateMany?: TarefasUpdateManyWithWhereWithoutTare_statusInput | TarefasUpdateManyWithWhereWithoutTare_statusInput[]
    deleteMany?: TarefasScalarWhereInput | TarefasScalarWhereInput[]
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type StatusCreateWithoutStat_tareInput = {
    stat_nome: string
  }

  export type StatusUncheckedCreateWithoutStat_tareInput = {
    stat_nome: string
  }

  export type StatusCreateOrConnectWithoutStat_tareInput = {
    where: StatusWhereUniqueInput
    create: XOR<StatusCreateWithoutStat_tareInput, StatusUncheckedCreateWithoutStat_tareInput>
  }

  export type StatusUpsertWithoutStat_tareInput = {
    update: XOR<StatusUpdateWithoutStat_tareInput, StatusUncheckedUpdateWithoutStat_tareInput>
    create: XOR<StatusCreateWithoutStat_tareInput, StatusUncheckedCreateWithoutStat_tareInput>
    where?: StatusWhereInput
  }

  export type StatusUpdateToOneWithWhereWithoutStat_tareInput = {
    where?: StatusWhereInput
    data: XOR<StatusUpdateWithoutStat_tareInput, StatusUncheckedUpdateWithoutStat_tareInput>
  }

  export type StatusUpdateWithoutStat_tareInput = {
    stat_nome?: StringFieldUpdateOperationsInput | string
  }

  export type StatusUncheckedUpdateWithoutStat_tareInput = {
    stat_nome?: StringFieldUpdateOperationsInput | string
  }

  export type TarefasCreateWithoutTare_statusInput = {
    tare_titulo: string
    tare_descricao: string
    tare_data?: Date | string
  }

  export type TarefasUncheckedCreateWithoutTare_statusInput = {
    tare_id?: number
    tare_titulo: string
    tare_descricao: string
    tare_data?: Date | string
  }

  export type TarefasCreateOrConnectWithoutTare_statusInput = {
    where: TarefasWhereUniqueInput
    create: XOR<TarefasCreateWithoutTare_statusInput, TarefasUncheckedCreateWithoutTare_statusInput>
  }

  export type TarefasCreateManyTare_statusInputEnvelope = {
    data: TarefasCreateManyTare_statusInput | TarefasCreateManyTare_statusInput[]
    skipDuplicates?: boolean
  }

  export type TarefasUpsertWithWhereUniqueWithoutTare_statusInput = {
    where: TarefasWhereUniqueInput
    update: XOR<TarefasUpdateWithoutTare_statusInput, TarefasUncheckedUpdateWithoutTare_statusInput>
    create: XOR<TarefasCreateWithoutTare_statusInput, TarefasUncheckedCreateWithoutTare_statusInput>
  }

  export type TarefasUpdateWithWhereUniqueWithoutTare_statusInput = {
    where: TarefasWhereUniqueInput
    data: XOR<TarefasUpdateWithoutTare_statusInput, TarefasUncheckedUpdateWithoutTare_statusInput>
  }

  export type TarefasUpdateManyWithWhereWithoutTare_statusInput = {
    where: TarefasScalarWhereInput
    data: XOR<TarefasUpdateManyMutationInput, TarefasUncheckedUpdateManyWithoutTare_statusInput>
  }

  export type TarefasScalarWhereInput = {
    AND?: TarefasScalarWhereInput | TarefasScalarWhereInput[]
    OR?: TarefasScalarWhereInput[]
    NOT?: TarefasScalarWhereInput | TarefasScalarWhereInput[]
    tare_id?: IntFilter<"Tarefas"> | number
    tare_titulo?: StringFilter<"Tarefas"> | string
    tare_descricao?: StringFilter<"Tarefas"> | string
    tare_data?: DateTimeFilter<"Tarefas"> | Date | string
    tare_stat_nome?: StringFilter<"Tarefas"> | string
  }

  export type TarefasCreateManyTare_statusInput = {
    tare_id?: number
    tare_titulo: string
    tare_descricao: string
    tare_data?: Date | string
  }

  export type TarefasUpdateWithoutTare_statusInput = {
    tare_titulo?: StringFieldUpdateOperationsInput | string
    tare_descricao?: StringFieldUpdateOperationsInput | string
    tare_data?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TarefasUncheckedUpdateWithoutTare_statusInput = {
    tare_id?: IntFieldUpdateOperationsInput | number
    tare_titulo?: StringFieldUpdateOperationsInput | string
    tare_descricao?: StringFieldUpdateOperationsInput | string
    tare_data?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TarefasUncheckedUpdateManyWithoutTare_statusInput = {
    tare_id?: IntFieldUpdateOperationsInput | number
    tare_titulo?: StringFieldUpdateOperationsInput | string
    tare_descricao?: StringFieldUpdateOperationsInput | string
    tare_data?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use StatusCountOutputTypeDefaultArgs instead
     */
    export type StatusCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = StatusCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TarefasDefaultArgs instead
     */
    export type TarefasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TarefasDefaultArgs<ExtArgs>
    /**
     * @deprecated Use StatusDefaultArgs instead
     */
    export type StatusArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = StatusDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TemaDefaultArgs instead
     */
    export type TemaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TemaDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}